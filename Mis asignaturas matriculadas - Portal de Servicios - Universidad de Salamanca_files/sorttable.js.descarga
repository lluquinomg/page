//-------------------------------------------------------------------
// Trim functions
//   Returns string with whitespace trimmed
//-------------------------------------------------------------------

function stripSpaces(str){ 
  return str.replace( /\s/g, " " ); 
}

function LTrim(str){
	if (str==null){return null;}
	for(var i=0;str.charAt(i)==" ";i++);
	return str.substring(i,str.length);
	}
function RTrim(str){
	if (str==null){return null;}
	for(var i=str.length-1;str.charAt(i)==" ";i--);
	return str.substring(0,i+1);
	}
	
function Trim(str){return LTrim(RTrim(stripSpaces(str)));}

function LTrimAll(str) {
  if (str==null){return str;}
	for (var i=0; str.charAt(i)==" " || str.charAt(i)=="\n" || str.charAt(i)=="\t"; i++);
	return str.substring(i,str.length);
	}
function RTrimAll(str) {
  if (str==null){return str;}
	for (var i=str.length-1; str.charAt(i)==" " || str.charAt(i)=="\n" || str.charAt(i)=="\t"; i--);
	return str.substring(0,i+1);
	}
function TrimAll(str) {
	return LTrimAll(RTrimAll(stripSpaces(str)));
	}
	
//-----------------------------------------------------------------------
// Sorttable.js
//   Ordenación de tablas
//-----------------------------------------------------------------------

addEvent(window, "load", sortables_init);

var SORT_COLUMN_INDEX;
var footer;
var filaDatos;

function sortables_init() {

    // Find all tables with class sortable and make them sortable
    if (!document.getElementsByTagName) return;
    tbls = document.getElementsByTagName("table");
    for (ti=0;ti<tbls.length;ti++) {
        thisTbl = tbls[ti];
        if ((' '+thisTbl.className+' ').indexOf("tabla") != -1){
        	if (thisTbl.getAttribute("sort")){
        		if(thisTbl.getAttribute("sort").substring(0,4) == "true"){
        			ts_makeSortable(thisTbl);
        		}else{
							ts_makeSortcolum(thisTbl);
						}
					}			
					if (thisTbl.id) {
            //initTable(thisTbl.id);
            ts_makeSortable(thisTbl);
          }
				}
    }
}

function ts_makeSortcolum(table) {						
    
    //número de la fila en la que aparecen los datos de ordenacion(para empezar a ordenar a partir de esa)
		//este valor cambiará en cada tabla
		var inicio = table.getAttribute("sort");
		filaDatos = inicio;

    // We have a row: assume it's the header, and make its contents clickable links
    for (var j=0;j<table.rows.length;j++){
	    for (var i=0;i<table.rows[j].cells.length;i++) {
	        if (table.rows[j].cells[i].getAttribute("column")){
	        	var cell = table.rows[j].cells[i];
	        	var txt = ts_getInnerText(cell);
	        	cell.innerHTML = '<a class="PortletHeaderLink" style="cursor:pointer"onclick="ts_resortTablecolum(this);return false;">'+txt+'<span class="sortarrow">&nbsp;</span></a>';
	      	}
	    }
  	}
}

function ts_makeSortable(table) {						

    if (table.rows && table.rows.length > 0) {
        var firstRow = table.rows[0];
    }
    if (!firstRow) return;
    
    // We have a first row: assume it's the header, and make its contents clickable links
    for (var i=0;i<firstRow.cells.length;i++) {
        var cell = firstRow.cells[i];
        var txt = ts_getInnerText(cell);
        cell.innerHTML = '<a class="PortletHeaderLink" style="cursor:pointer"onclick="ts_resortTable(this);return false;">'+txt+'<span class="sortarrow">&nbsp;</span></a>';
    }
}

function ts_getInnerText(el) {	
	if (typeof el == "string") return el;
	if (typeof el == "undefined") { return el };
	if (el.innerText) return el.innerText;	//Not needed but it is faster
	var str = "";
	
	var cs = el.childNodes;
	var l = cs.length;
	for (var i = 0; i < l; i++) {
		switch (cs[i].nodeType) {
			case 1: //ELEMENT_NODE
				if (cs[i].getAttribute("value")!=null && cs[i].getAttribute("type")=="text") {					
					return cs[i].getAttribute("value");

				} else {
					str += ts_getInnerText(cs[i]);	
				}
				break;
			case 3:	//TEXT_NODE
				str += cs[i].nodeValue;
				break;
		}		
	}
	return str;
}

function ts_resortTable(lnk) {
    // get the span
    var span;
    for (var ci=0;ci<lnk.childNodes.length;ci++) {
        if (lnk.childNodes[ci].tagName && (lnk.childNodes[ci].tagName.toLowerCase() == 'span' || lnk.childNodes[ci].tagName.toLowerCase() == 'input' || lnk.childNodes[ci].tagName.toLowerCase() == 'font')) span = lnk.childNodes[ci];        
    }
    var spantext = ts_getInnerText(span);
    var td = lnk.parentNode;
    var column = td.cellIndex;
    var table = getParent(td,'TABLE');
       
		// Borro la fila por ser footer
		if (table.tFoot != null) {
			footer = table.rows[table.rows.length-1]
			table.deleteRow(table.rows.length-1);   
		} 
    
    // Work out a type for the column
    if (table.rows.length <= 1) return;
    var indice = 0;
    
    for (i=1; i<table.rows.length; i++) {
      if (ts_getInnerText(table.rows[i].cells[column]).length > 0) {
        indice = i;
	 break;
      }
    }    
    
    for (i=1; i<table.rows.length; i++) {
      var itm = ts_getInnerText(table.rows[i].cells[column]);
      itm=TrimAll(itm);
      if (itm !=""){
        break;
      }
    }
    sortfn = ts_sort_caseinsensitive;
    if (itm.match(/^\d\d[\/-]\d\d[\/-]\d\d\d\d$/)) sortfn = ts_sort_date;
    if (itm.match(/^\d\d[\/-]\d\d[\/-]\d\d$/)) sortfn = ts_sort_date;
    if (itm.match(/^[£$]/)) sortfn = ts_sort_currency;
    if (itm.match(/^[+-]?[\d\.,]+%?$/)) sortfn = ts_sort_numeric;
    
    SORT_COLUMN_INDEX = column;
    //var firstRow = new Array();
    var newRows = new Array();
    //for (i=0;i<table.rows[0].length;i++) { firstRow[i] = table.rows[0][i]; }
    for (j=1;j<table.rows.length;j++) { newRows[j-1] = table.rows[j]; }

    newRows.sort(sortfn);

    if (span.getAttribute("sortdir") == 'down') {
    		//ARROW = '<img src="scroll-up.gif" border="0" valign="middle">'; //&uarr
        ARROW = '&uarr;';
        newRows.reverse();
        span.setAttribute('sortdir','up');
    } else {
    		//ARROW = '<img src="scroll-down.gif" border="0" valign="middle">'; //&uarr
        ARROW = '&darr;';
        span.setAttribute('sortdir','down');
    }
    
    // We appendChild rows that already exist to the tbody, so it moves them rather than creating new ones
    // don't do sortbottom rows
    for (i=0;i<newRows.length;i++) { if (!newRows[i].className || (newRows[i].className && (newRows[i].className.indexOf('sortbottom') == -1))) table.tBodies[0].appendChild(newRows[i]);}
    // do sortbottom rows only
    for (i=0;i<newRows.length;i++) { if (newRows[i].className && (newRows[i].className.indexOf('sortbottom') != -1)) table.tBodies[0].appendChild(newRows[i]);}
    
    // Delete any other arrows there may be showing
    var allspans = document.getElementsByTagName("span");
    for (var ci=0;ci<allspans.length;ci++) {
        if (allspans[ci].className == 'sortarrow') {
            if (getParent(allspans[ci],"table") == getParent(lnk,"table")) { // in the same table as us?
                allspans[ci].innerHTML = '&nbsp;';
            }
        }
    }
        
    span.innerHTML = ARROW;
    
    // Añado el footer nuevamente
    
    //var fila = table.insertRow(table.rows.length);
    //alert(fila + " " +footer);
    //fila = footer;
    if (table.tFoot!=null) table.tFoot.appendChild(footer); 
}

function ts_resortTablecolum(lnk) {
    // get the span
    var span;
    for (var ci=0;ci<lnk.childNodes.length;ci++) {
        if (lnk.childNodes[ci].tagName && (lnk.childNodes[ci].tagName.toLowerCase() == 'span' || lnk.childNodes[ci].tagName.toLowerCase() == 'input' || lnk.childNodes[ci].tagName.toLowerCase() == 'font')) span = lnk.childNodes[ci];        
    }
    var spantext = ts_getInnerText(span);
    var td = lnk.parentNode;
    //var tr = td.parentNode;
    
    //var fil = tr.id;
    //var column = td.cellIndex;
    var column = td.getAttribute("column");
 		
 
  	var table = getParent(td,'TABLE');

    
		// Borro la fila por ser footer
		if (table.tFoot != null) {
			footer = table.rows[table.rows.length-1]
			table.deleteRow(table.rows.length-1);   
		} 
    
    // Work out a type for the column
    /*if (table.rows.length <= 1) return;
    var indice = 0;
    for (i=1; i<table.rows.length; i++) {
      if (ts_getInnerText(table.rows[i].cells[column]).length > 0) {
        indice = i;
	 break;
      }
    }*/
    
    
    for (i=filaDatos; i<table.rows.length; i++) {
    var itm = ts_getInnerText(table.rows[i].cells[column]);
    itm=TrimAll(itm);
     if (itm !=""){
       break;
      }
    }
    sortfn = ts_sort_caseinsensitive;
    if (itm.match(/^\d\d[\/-]\d\d[\/-]\d\d\d\d$/)) sortfn = ts_sort_date;
    if (itm.match(/^\d\d[\/-]\d\d[\/-]\d\d$/)) sortfn = ts_sort_date;
    if (itm.match(/^[£$]/)) sortfn = ts_sort_currency;
    if (itm.match(/^[+-]?[\d\.,]+%?$/)) sortfn = ts_sort_numeric;
    SORT_COLUMN_INDEX = column;    
    //var firstRow = new Array();
    var newRows = new Array();
    //for (i=0;i<table.rows[fil-1].length;i++) { firstRow[i] = table.rows[0][i]; }
    for (j=filaDatos;j<table.rows.length;j++) { newRows[j-filaDatos] = table.rows[j]; }

    newRows.sort(sortfn);

    if (span.getAttribute("sortdir") == 'down') {
    		//ARROW = '<img src="scroll-up.gif" border="0" valign="middle">'; //&uarr
        ARROW = '&uarr;';
        newRows.reverse();
        span.setAttribute('sortdir','up');
    } else {
    		//ARROW = '<img src="scroll-down.gif" border="0" valign="middle">'; //&uarr
        ARROW = '&darr;';
        span.setAttribute('sortdir','down');
    }
    
    // We appendChild rows that already exist to the tbody, so it moves them rather than creating new ones
    // don't do sortbottom rows
    for (i=0;i<newRows.length;i++) { if (!newRows[i].className || (newRows[i].className && (newRows[i].className.indexOf('sortbottom') == -1))) table.tBodies[0].appendChild(newRows[i]);}
    // do sortbottom rows only
    for (i=0;i<newRows.length;i++) { if (newRows[i].className && (newRows[i].className.indexOf('sortbottom') != -1)) table.tBodies[0].appendChild(newRows[i]);}
    
    // Delete any other arrows there may be showing
    var allspans = document.getElementsByTagName("span");
    for (var ci=0;ci<allspans.length;ci++) {
        if (allspans[ci].className == 'sortarrow') {
            if (getParent(allspans[ci],"table") == getParent(lnk,"table")) { // in the same table as us?
                allspans[ci].innerHTML = '&nbsp;';
            }
        }
    }
        
    span.innerHTML = ARROW;
    
    // Añado el footer nuevamente
    
    //var fila = table.insertRow(table.rows.length);
    //alert(fila + " " +footer);
    //fila = footer;
    if (table.tFoot!=null) table.tFoot.appendChild(footer); 
}

function getParent(el, pTagName) {
	if (el == null) return null;
	else if (el.nodeType == 1 && el.tagName.toLowerCase() == pTagName.toLowerCase())	// Gecko bug, supposed to be uppercase
		return el;
	else
		return getParent(el.parentNode, pTagName);
}
function ts_sort_date(a,b) {
    // y2k notes: two digit years less than 50 are treated as 20XX, greater than 50 are treated as 19XX
    aa = ts_getInnerText(a.cells[SORT_COLUMN_INDEX]);
    bb = ts_getInnerText(b.cells[SORT_COLUMN_INDEX]);
    
    aa=TrimAll(aa);
		bb=TrimAll(bb);
		
    if (aa.length == 10) {
        dt1 = aa.substr(6,4)+aa.substr(3,2)+aa.substr(0,2);
    } else {
        yr = aa.substr(6,2);
        if (parseInt(yr) < 50) { yr = '20'+yr; } else { yr = '19'+yr; }
        dt1 = yr+aa.substr(3,2)+aa.substr(0,2);
    }
    if (bb.length == 10) {
        dt2 = bb.substr(6,4)+bb.substr(3,2)+bb.substr(0,2);
    } else {
        yr = bb.substr(6,2);
        if (parseInt(yr) < 50) { yr = '20'+yr; } else { yr = '19'+yr; }
        dt2 = yr+bb.substr(3,2)+bb.substr(0,2);
    }
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
}

function ts_sort_currency(a,b) { 
    aa = ts_getInnerText(a.cells[SORT_COLUMN_INDEX]).replace(/[^0-9.]/g,'');
    bb = ts_getInnerText(b.cells[SORT_COLUMN_INDEX]).replace(/[^0-9.]/g,'');
    aa=TrimAll(aa);
		bb=TrimAll(bb);
    return parseFloat(aa) - parseFloat(bb);
}

 function ts_sort_numeric(a,b) { 
    aa = parseFloat(TrimAll(ts_getInnerText(a.cells[SORT_COLUMN_INDEX]).replace(/[.]/g, "").replace(",", ".")));
    bb = parseFloat(TrimAll(ts_getInnerText(b.cells[SORT_COLUMN_INDEX]).replace(/[.]/g, "").replace(",", ".")));
    
    if (isNaN(aa)){
      if (isNaN(bb))
        return 0;
      else
        return -1;
    }else{
      if (isNaN(bb))
        return 1;
    }
    // aa = 0; 
    //if (isNaN(bb)) bb = 0;    
    return aa-bb;
}

function replaceAll( text, busca, reemplaza ){
  while (text.toString().search(busca) != -1)
      text = text.toString().replace(busca,reemplaza);
  return text;
}

function replaceTildes(text){  
  text =replaceAll(text,/á|à|ä|â/,'a');
  text =replaceAll(text,/é|è|ë|ê/,'e');
  text =replaceAll(text,/í|ì|ï|î/,'i');
  text =replaceAll(text,/ó|ò|ö|ô/,'o');
  text =replaceAll(text,/ú|ù|ü|û/,'u');
  text =replaceAll(text,/Á|À|Ä|Â/,'A');
  text =replaceAll(text,/É|È|Ë|Ê/,'E');
  text =replaceAll(text,/Í|Ì|Ï|Î/,'I');
  text =replaceAll(text,/Ó|Ò|Ö|Ô/,'O');
  text =replaceAll(text,/Ú|Ù|Ü|Û/,'U');
  
  return text;
}


function ts_sort_caseinsensitive(a,b) {
    aa = ts_getInnerText(a.cells[SORT_COLUMN_INDEX]).toLowerCase();
    bb = ts_getInnerText(b.cells[SORT_COLUMN_INDEX]).toLowerCase();
    
    aa=replaceTildes(TrimAll(aa));
		bb=replaceTildes(TrimAll(bb));
    
    if (aa==bb) return 0;
    if (aa<bb) return -1;
    return 1;
}

function ts_sort_default(a,b) {
    aa = ts_getInnerText(a.cells[SORT_COLUMN_INDEX]);
    bb = ts_getInnerText(b.cells[SORT_COLUMN_INDEX]);
    
    aa=TrimAll(aa);
		bb=TrimAll(bb);
		
    if (aa==bb) return 0;
    if (aa<bb) return -1;
    return 1;
}


function addEvent(elm, evType, fn, useCapture)
// addEvent and removeEvent
// cross-browser event handling for IE5+,  NS6 and Mozilla
// By Scott Andrew
{
  if (elm.addEventListener){
    elm.addEventListener(evType, fn, useCapture);
    return true;
  } else if (elm.attachEvent){
    var r = elm.attachEvent("on"+evType, fn);
    return r;
  } else {
    alert("Handler could not be removed");
  }
} 

